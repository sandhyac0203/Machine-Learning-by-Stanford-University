Code
A.Plotting the data-Understand the dataset
clear ; close all; clc

"fprintf('Plotting Data ...\n')
data=load('ex1data1.txt')
X=data(:,1);y=data(:,2)
m = length(y);"
"function plotData(X, y);
plot(x, y, 'rx', 'MarkerSize', 10);
ylabel('Profit in $10,000s');
xlabel('Population of City in 10,000s');
figure;
end"
plotData(X, y);
fprintf('Program paused. Press enter to continue.\n');


B. Gradient Descent
Update Equations- Minimize cost function



"fprintf('Running Gradient Descent ...\n')
X = [ones(m, 1), data(:,1)];"
"theta = zeros(2, 1);
iterations = 1500;
alpha = 0.01;"

Computing the cost J (theta)

"function J = computeCost(X, y, theta)
m = length(y);
J = 0;
J = (1/(2*m)) * (X*theta-y)' * (X*theta-y);
end"
computeCost(X, y, theta)

Gradient Descent

"function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
m = length(y);
J_history = zeros(num_iters, 1);
for iter = 1:num_iters
theta=theta-alpha *(1.0/m) *X' *(X*theta-y)
J_history(iter) = computeCost(X, y, theta);
end
end"
theta = gradientDescent(X, y, theta, alpha, iterations)
"fprintf('Theta found by gradient descent: ');
fprintf('%f %f \n', theta(1), theta(2));"

C.Plot the linear fit

"hold on;
plot(X(:,2), X*theta, '-')
legend('Training data', 'Linear regression')
hold off"

D.Predict values for population sizes of 35,000 and 70,000

"predict1 = [1, 3.5] *theta;
fprintf('For population = 35,000, we predict a profit of %f\n',...
    predict1*10000);
predict2 = [1, 7] * theta;
fprintf('For population = 70,000, we predict a profit of %f\n',...
    predict2*10000);

fprintf('Program paused. Press enter to continue.\n');
pause;"

E.Visualizing J(theta_0, theta_1)
fprintf('Visualizing J(theta_0, theta_1) ...\n')

Grid over which we will calculate J:

"theta0_vals = linspace(-10, 10, 100);
theta1_vals = linspace(-1, 4, 100);"

initialize J_vals to a matrix of 0's
J_vals = zeros(length(theta0_vals), length(theta1_vals));

Fill out J_vals

"for i = 1:length(theta0_vals)
    for j = 1:length(theta1_vals)
          t = [theta0_vals(i); theta1_vals(j)];    
          J_vals(i,j) = computeCost(X, y, t);
    end
end"

J_vals = J_vals';

Surface plot
"figure;
surf(theta0_vals, theta1_vals, J_vals)
xlabel('\theta_0'); ylabel('\theta_1');"

"Contour plot
Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100"

"figure;
contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))
xlabel('\theta_0'); ylabel('\theta_1');
hold on;
plot(theta(1), theta(2), 'rx', 'MarkerSize', 10, 'LineWidth', 2);"
